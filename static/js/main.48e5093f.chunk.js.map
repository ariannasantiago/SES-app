{"version":3,"sources":["components/Header.js","components/Footer.js","components/MovieInfoCard.js","components/MovieSearchList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","title","Footer","MovieInfoCard","movieID","encodeURIComponent","movie","NULL_POSTER_ID","process","useState","error","setError","isLoaded","setIsLoaded","resultBoolean","setresultBoolean","movieTitle","setMovieTitle","movieRelease","setMovieRelease","movieRuntime","setMovieRuntime","movieGenre","setMovieGenre","movieDirector","setMovieDirector","moviePoster","setMoviePoster","movieRating","setMovieRating","useEffect","apiIdURL","a","fetch","then","res","json","response","Response","Error","Title","Released","Runtime","Genre","Director","imdbRating","Poster","catch","class","style","width","Card","Img","variant","src","Body","Subtitle","Text","MovieSearchList","movies","setMovies","query","setQuery","totalResults","setTotalResults","totalPages","setTotalPages","pageNum","setPageNum","loading","setLoading","fetchMyAPI","searchParam","apiURL","console","log","pages","Math","ceil","onSubmit","e","preventDefault","htmlFor","placeholder","id","type","value","onChange","target","onClick","marginLeft","map","imdbID","paddingBottom","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48e5093f.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h1>{props.title}</h1>\n            <div>\n                <p>Search and browse hundreds of thousands of movies with just one click.</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import Reach from 'react';\nimport './Footer.css';\n\nfunction Footer(props) {\n    return(\n        <div className=\"footer\">\n            {props.title} | 2021<br></br> \n            Created by Arianna Santiago for the Capital One SES Coding Challenge\n        </div>\n    )\n}\n\nexport default Footer;","import React, { useEffect, useState } from 'react';\nimport './MovieInfoCard.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport  Card from 'react-bootstrap/Card';\n\nfunction MovieInfoCard(props) {\n    //passes imdb id\n\n    const movieID = encodeURIComponent(props.movie);\n    const API_KEY = process.env.REACT_APP_API_KEY;\n    const NULL_POSTER_ID = process.env.REACT_APP_NULL_POSTER_URL;\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [resultBoolean, setresultBoolean] = useState(true);\n\n    const [movieTitle, setMovieTitle] = useState('');\n    const [movieRelease, setMovieRelease] = useState(0);\n    const [movieRuntime, setMovieRuntime] = useState(0);\n    const [movieGenre, setMovieGenre] = useState('');\n    const [movieDirector, setMovieDirector] = useState('');\n    const [moviePoster, setMoviePoster] = useState('');\n    const [movieRating, setMovieRating] = useState(0);\n\n    \n\n\n    useEffect(() => {\n        const apiIdURL = `https://www.omdbapi.com/?apikey=${API_KEY}&i=${movieID}`;\n        //console.log(apiIdURL);\n\n        (async () => {\n            await fetch(apiIdURL) \n                .then(res => res.json())\n                .then (\n                    (response) => {\n\n                        if (response.Response === \"False\") {\n                            setresultBoolean(false);\n                            setError(response.Error);\n                            setMoviePoster(NULL_POSTER_ID);\n                        } else {\n                            setMovieTitle(response.Title);\n                            setMovieRelease(response.Released);\n                            setMovieRuntime(response.Runtime);\n                            setMovieGenre(response.Genre);\n                            setMovieDirector(response.Director);\n                            setMovieRating(response.imdbRating)\n                            //console.log(response);\n                        }\n\n                        if (response.Poster === 'N/A') {\n                            setMoviePoster(NULL_POSTER_ID);\n                        } else {\n                            setMoviePoster(response.Poster);\n                        }\n                    }\n                )\n                .catch(\n                    (error) => {\n                        setError(error);\n                    }\n                )\n        } ) ()\n        \n        setIsLoaded(true);\n        \n    }, [movieID])\n\n    //need to figure out how to trigger a conditional render with \"loading\" messages.\n    return (\n        <div class=\"card h-100 \" style = {{ width: '14rem'}}>\n            <div><Card.Img variant =\"top\" src={moviePoster}></Card.Img></div>\n                { isLoaded ? ( //movie done loading\n                    <div>\n                        { resultBoolean ? (//valid movie returned\n                            <Card.Body>\n                                <Card.Title>{movieTitle}</Card.Title>\n                                <Card.Subtitle className=\"mb-s text-muted\">{movieRelease}</Card.Subtitle>\n                                <Card.Text>\n                                    <p>\n                                        Runtime: {movieRuntime}<br></br>\n                                        Genre: {movieGenre}<br></br>\n                                        Director: {movieDirector}<br></br>\n                                        Rating: {movieRating}<br></br>\n                                    </p>\n                            </Card.Text>\n                            </Card.Body>\n                        ) : ( //invalid movie\n                            <Card.Body>\n                                <Card.Title>Error</Card.Title>\n                                <Card.Text>{error}</Card.Text>\n                            </Card.Body>\n                            ) }\n                        \n                    </div>\n\n\n                ) : ( //movie not done\n                    <Card.Body>\n                        <Card.Title>Title Loading</Card.Title>\n                        <Card.Subtitle className=\"mb-s text-muted\">loading...</Card.Subtitle>\n                        <Card.Text>\n                            <p>\n                                Details loading...\n                            </p>\n                        </Card.Text>\n                    </Card.Body>\n                 ) }\n                \n        </div>\n            \n    ) \n}\n\nexport default MovieInfoCard;","import React, { useEffect, useState } from 'react';\nimport './MovieSearchList.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MovieInfoCard from './MovieInfoCard';\n\nfunction MovieSearchList() {\n    const [movies, setMovies] = useState([]);\n    const [query, setQuery] = useState('');\n    const [totalResults, setTotalResults] = useState(0);\n    const [totalPages, setTotalPages] = useState(0);\n    const [pageNum, setPageNum] = useState(1);\n    const [resultBoolean, setresultBoolean] = useState(false);\n    const [error, setError] = useState(null);\n\n    const [loading, setLoading] = useState(false);\n\n    function handleSumbit(e) {\n        e.preventDefault();\n        setTotalPages(0);\n        setPageNum(1);\n        fetchMyAPI();\n    }\n\n    async function fetchMyAPI() {\n        const API_KEY = process.env.REACT_APP_API_KEY;\n        const searchParam = encodeURIComponent(query)\n        const apiURL = `https://www.omdbapi.com/?apikey=${API_KEY}&s=${searchParam}&type=movie&page=${pageNum}&r=json`\n        //console.log(searchParam);\n        //console.log(apiURL);\n        \n        let response = await fetch(apiURL);\n        response = await response.json();\n        \n        //console.log(response);\n        \n        //if fetch unsuccessful\n        if (response.Response === \"False\") {\n            setresultBoolean(false);\n            setError(response.Error);\n            setPageNum(1);\n            setTotalResults(0);\n            //console.log('Results? ', resultBoolean)\n        } \n        //successful fetch triggered by \"load more\"; set loading false when finished\n        else if (loading) {\n            console.log(\"loading brand triggered\");\n            setMovies([...movies, ...response['Search']]);\n            setLoading(false, console.log('loading false'));\n        }\n        //successful fetch triggered by search or pagination\n        else {\n\n            setresultBoolean(true);\n            setMovies(response['Search']);\n            setTotalResults(response.totalResults);\n            const pages = Math.ceil((response.totalResults)/10);\n            setTotalPages(pages);\n\n            // console.log('Results? ', resultBoolean);\n            // console.log('Search query response', movies);\n            // console.log('response results: ', totalResults);\n            // console.log('Total Pages: ', totalPages);\n\n        }\n\n    }\n\n\n    //ensure immediate re-rendering and that API only queried once; dependent on updating pageNum\n    useEffect(() => {\n        if(query !== \"\") {\n            fetchMyAPI();\n        }\n    }, [pageNum]);\n\n\n    //Pagination Functions: only update pageNum if possible; re-render triggered by useEffect\n    function nextPage() {\n        if (pageNum < totalPages) {\n            setPageNum(pageNum+1); \n            //console.log('next -> current page:', pageNum));\n        }\n    } \n\n    function previousPage() {\n        if (pageNum !== 1) {\n            setPageNum(pageNum-1,  \n            //console.log('prev -> current page', pageNum);\n            );\n        }\n    }\n\n    function loadMore() {\n        if (pageNum < totalPages) {\n            //console.log(\"load more clicked\");\n            setLoading(true); //sets Loading true so button text changes\n            setPageNum(pageNum+1);\n        }\n    }\n\n\n    return (\n        <div className=\"moviesearchlist\">\n            <div class=\"searchform\">\n\n                <form onSubmit={handleSumbit}>\n                    {/* (query) => \n                    {if (query === '') {\n                        setError('Search term cannot be blank.')\n                    } else {\n                        handleSumbit()}}}> */}\n                    <label htmlFor=\"queryInput\">Search:</label>\n                    <input\n                        placeholder=\"enter a search term\"\n                        id=\"queryInput\"\n                        type=\"text\"\n                        value={query}\n                        onChange={(e => setQuery(e.target.value))}\n                        />\n                    <button className=\"search\">Submit</button>\n\n                </form>\n            \n                <div className=\"searchdetails\">\n                    <p>Search Term: {query} <br></br>\n                    Total Results : {totalResults} | Total Pages: {totalPages} | Current Page: {pageNum}</p>\n                </div>\n                \n                <div className=\"pagebuttons\">\n                    <button class=\"mx-1 rounded\" onClick={previousPage} style={{marginLeft: \"0%\"}}>Previous Page</button>\n                    <button class=\"mx-1 rounded\"\n                        onClick={nextPage} style={{marginLeft: \"0%\"}}>Next Page \n                    </button>\n                </div>\n\n            </div>  \n\n            <div className = \"searchresults\" class=\"d-flex justify-content-around\">             \n                { resultBoolean ? ( //if results available\n\n                    <div class=\"row g-3\">  \n                        {movies.map(movie => {\n                        //map \"movies\" array to access more details\n                            return(\n                        //use below for testing paginations/title search functionality: \n                        //  <li movie={movie} >{movie.Title} {movie.imdbID}</li>\n                        \n                                <div class=\"col\">\n                                    <MovieInfoCard movie={movie.imdbID} key={movie.imdbID}></MovieInfoCard>\n                                </div>\n                            )\n                        })}\n                        \n                        {/* \"load more\" button at bottom of results if more results available */}\n                        <div className=\"loadMore\">\n                            {(totalPages !== pageNum) && \n                            (totalPages !== 0) && \n                                //change button text if results loading\n                                <button class=\"rounded\" onClick={() => loadMore()}>          {loading ? 'Loading...' : 'Load More'} \n                                </button>\n                            }\n                        </div>\n\n                        <div className=\"searchdetails\" style={{paddingBottom: '1rem'}}>\n                            <p>Search Term: {query} <br></br>\n                            Total Results: {totalResults} | Total Pages: {totalPages} | Current Page: {pageNum}</p>\n                        </div>\n\n                    </div>\n                    \n\n                ) : (\n                    <div>{error}</div>\n                )\n                }\n            </div>\n\n        </div>\n    )\n}\n\nexport default MovieSearchList;","import {React} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport MovieSearchList from './components/MovieSearchList';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"FindFlix\"></Header>\n      <MovieSearchList></MovieSearchList>\n      <Footer title=\"FindFlix\"></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}